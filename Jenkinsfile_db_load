pipeline {
    agent any

    environment {
        PROJECT_NAME = 'offers' // Set the project name to match the complete pipeline
    }
    parameters {
        string(name: 'DUMP_FILE_PATH', defaultValue: '', description: 'Path to the database dump file to load')
    }
    stages {
        stage('Ensure Database is Running') {
            steps {
                script {
                    // Check if the database container is already running
                    def containerExists = sh(script: "docker ps -q -f name=${env.PROJECT_NAME}_database_1", returnStdout: true).trim()
                    if (!containerExists) {
                        echo "Database container is not running. Starting a new one."
                        // Start the database container if it's not already running
                        sh "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml up -d --remove-orphans"
                    } else {
                        echo "Database container is already running."
                    }
                }
            }
        }
        stage('Load Database Dump') {
            steps {
                script {
                    // Ensure the dump file path is provided
                    if (!params.DUMP_FILE_PATH) {
                        error "No dump file path provided. Please provide a valid path to the database dump file."
                    }

                    // Ensure the file exists
                    def fileExists = sh(script: "if [ -f ${params.DUMP_FILE_PATH} ]; then echo 'true'; else echo 'false'; fi", returnStdout: true).trim()
                    if (fileExists == 'false') {
                        error "Dump file does not exist at path: ${params.DUMP_FILE_PATH}"
                    }

                    // Copy the dump file to the database container
                    def containerId = sh(script: "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml ps -q database", returnStdout: true).trim()
                    sh "docker cp ${params.DUMP_FILE_PATH} ${containerId}:/data/db/restore.tar.gz"

                    // Create the backup directory
                    sh "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database mkdir -p /data/db/backup"

                    // Print the contents of the directory before extraction for debugging
                    def beforeExtract = sh(script: "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database ls -l /data/db", returnStdout: true).trim()
                    echo "Before extraction: ${beforeExtract}"

                    // Extract the dump file in the container
                    sh "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database tar -xvzf /data/db/restore.tar.gz -C /data/db"

                    // Print the contents of the directory after extraction for debugging
                    def afterExtract = sh(script: "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database ls -l /data/db/backup", returnStdout: true).trim()
                    echo "After extraction: ${afterExtract}"

                    // Restore the database and capture the output for debugging
                    def mongorestoreOutput = sh(script: "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database mongorestore", returnStdout: true).trim()
                    echo "Mongorestore output: ${mongorestoreOutput}"
                }
            }
        }
    }
}
