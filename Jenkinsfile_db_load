pipeline {
    agent any

    environment {
        // Define the directory where backups will be stored
        BACKUP_DIR = '/var/backups/mongodb'
        PROJECT_NAME = 'offers' // Set the project name to match the complete pipeline
        DATABASE_NAME = 'db'
    }
    tools {
        jdk 'JDK-19'
        maven 'Maven'
    }
    parameters {
        string(name: 'DUMP_FILE_PATH_TO_LOAD', defaultValue: '', description: 'Path to the database dump file to load')
    }
    stages {
        stage('Prepare Backup Filename') {
            steps {
                script {
                    // Generate the timestamped filename if DUMP_FILE is not provided
                    if (!params.DUMP_FILE_PATH) {
                        def timestamp = sh(script: 'date +%Y_%m_%d_%H%M', returnStdout: true).trim()
                        env.DUMP_FILE = "data_dump_${timestamp}.tar.gz"
                    } else {
                        env.DUMP_FILE = params.DUMP_FILE_PATH
                    }
                    echo "Using dump file name: ${env.DUMP_FILE}"
                }
            }
        }
        stage('Ensure Database is Running') {
            steps {
                script {
                    // Check if the database container is already running
                    def containerExists = sh(script: "docker ps -q -f name=${env.PROJECT_NAME}_database_1", returnStdout: true).trim()
                    if (!containerExists) {
                        echo "Database container is not running. Starting a new one."
                        // Start the database container if it's not already running
                        sh "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml up -d --remove-orphans"
                    } else {
                        echo "Database container is already running."
                    }
                }
            }
        }
        stage('Dump MongoDB') {
            steps {
                script {
                    // Dump the database and capture the output for debugging
                    def mongodumpOutput = sh(script: """
                    docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database mongodump --out /data/db/backup
                    """, returnStdout: true).trim()
                    echo "Mongodump output: ${mongodumpOutput}"

                    // Compress the dump
                    def tarOutput = sh(script: "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database tar -cvzf /data/db/backup.tar.gz /data/db/backup", returnStdout: true).trim()
                    echo "Tar output: ${tarOutput}"

                    // Copy dump to host
                    sh "docker cp \$(docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml ps -q database):/data/db/backup.tar.gz ./backup.tar.gz"
                }
            }
        }
        stage('Copy Dump to Backup Directory') {
            steps {
                script {
                    // Ensure the backup directory exists
                    sh "mkdir -p ${BACKUP_DIR}"
                    // Copy the dump file to the backup directory with the dynamic name
                    sh "cp ./backup.tar.gz ${BACKUP_DIR}/${env.DUMP_FILE}"
                }
            }
        }
        stage('Load Database Dump') {
            steps {
                script {
                    // Ensure the dump file path is provided
                    if (!params.DUMP_FILE_PATH_TO_LOAD) {
                        error "No dump file path provided. Please provide a valid path to the database dump file."
                    }

                    // Copy the dump file to the database container
                    sh "docker cp ${params.DUMP_FILE_PATH_TO_LOAD} \$(docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml ps -q database):/data/db/restore.tar.gz"

                    // Extract the dump file in the container
                    sh "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database tar -xvzf /data/db/restore.tar.gz -C /data/db"

                    // Restore the database
                    sh "docker-compose -p ${env.PROJECT_NAME} -f docker-compose.db.yml exec -T database mongorestore --drop /data/db/backup"
                }
            }
        }
    }
}