pipeline {
    agent any

    environment {
        // Define the directory where backups will be stored
        BACKUP_DIR = '/var/backups/mongodb'
    }
    tools {
        jdk 'JDK-19'
        maven 'Maven'
    }
    stages {
        stage('Prepare Backup Filename') {
            steps {
                script {
                    // Generate the timestamped filename if DUMP_FILE is not provided
                    if (!params.DUMP_FILE) {
                        def timestamp = sh(script: 'date +%Y_%m_%d_%H%M', returnStdout: true).trim()
                        env.DUMP_FILE = "data_dump_${timestamp}.tar.gz"
                    } else {
                        env.DUMP_FILE = params.DUMP_FILE
                    }
                    echo "Using dump file name: ${env.DUMP_FILE}"
                }
            }
        }
        stage('Ensure Database is Running') {
            steps {
                script {
                    // Check if the database container is already running
                    def containerExists = sh(script: "docker ps -q -f name=database", returnStdout: true).trim()
                    if (!containerExists) {
                        echo "Database container is not running. Starting a new one."
                        // Start the database container if it's not already running
                        sh "docker-compose -f docker-compose.db.yml up -d --remove-orphans"
                    } else {
                        echo "Database container is already running."
                    }
                }
            }
        }
        stage('Dump MongoDB') {
            steps {
                script {
                    try {
                        // Dump the database and capture the output for debugging
                        def mongodumpOutput = sh(script: """
                            docker-compose -f docker-compose.db.yml exec -T database bash -c 'mongodump --out /data/db/backup && echo "mongodump succeeded" || (echo "mongodump failed" && exit 1)'
                        """, returnStdout: true).trim()
                        echo "Mongodump output: ${mongodumpOutput}"

                        // Compress the dump
                        def tarOutput = sh(script: "docker-compose -f docker-compose.db.yml exec -T database tar -cvzf /data/db/backup.tar.gz /data/db/backup", returnStdout: true).trim()
                        echo "Tar output: ${tarOutput}"

                        // Copy dump to host
                        sh "docker cp \$(docker-compose -f docker-compose.db.yml ps -q database):/data/db/backup.tar.gz ./backup.tar.gz"
                    } catch (Exception e) {
                        // Log the error but do not fail the build
                        echo "Database dump failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('Copy Dump to Backup Directory') {
            steps {
                script {
                    // Ensure the backup directory exists
                    sh "mkdir -p ${BACKUP_DIR}"
                    // Copy the dump file to the backup directory with the dynamic name
                    sh "cp ./backup.tar.gz ${BACKUP_DIR}/${env.DUMP_FILE}"
                }
            }
        }
    }
}

